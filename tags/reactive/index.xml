<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reactive on Ross Lawley</title>
    <link>http://rosslawley.co.uk/tags/reactive/</link>
    <description>Recent content in Reactive on Ross Lawley</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 31 Mar 2017 13:15:28 +0100</lastBuildDate>
    <atom:link href="http://rosslawley.co.uk/tags/reactive/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MongoDB Scala Driver 2.0 released</title>
      <link>http://rosslawley.co.uk/mongodb-scala-driver-2.0/</link>
      <pubDate>Fri, 31 Mar 2017 13:15:28 +0100</pubDate>
      
      <guid>http://rosslawley.co.uk/mongodb-scala-driver-2.0/</guid>
      <description>

&lt;p&gt;The 2.0.0 version of the official Scala Driver for MongoDB has been released!&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;max-width: 100%;&#34; src=&#34;http://rosslawley.co.uk/images/scala.jpg&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;case-class-support:f6e2133bab10204926d960626000d5d7&#34;&gt;Case Class support&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m really happy to announce the introduction of case class support, making it much easier to use your domain models with MongoDB. Internally Codecs are used to convert datatypes to and from &lt;a href=&#34;http://bsonspec.org&#34;&gt;BSON&lt;/a&gt; - the internal data format for MongoDB. The 2.0 release includes a Macro that can create a codecs from case classes. The encoding and decoding the values of each field still uses the codec registry, so any users with custom codecs can still happily use these Macro based codecs.&lt;/p&gt;

&lt;p&gt;To show how simple it is we can use the following &lt;code&gt;Person&lt;/code&gt; case class as an example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;case class Person(_id: ObjectId, firstName: String, lastName: String)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice, the &lt;code&gt;_id&lt;/code&gt; field, this is a special field in MongoDB because it represents the primary key. It&amp;rsquo;s advisable to include &lt;code&gt;_id&lt;/code&gt; field in your case classes as it gives access to the primary key. When inserting a BSON document into MongoDB if it doesn&amp;rsquo;t contain the &lt;code&gt;_id&lt;/code&gt; field one is added automatically. By adding a companion object an &lt;code&gt;_id&lt;/code&gt; can be automatically generated:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;object Person {
  def apply(firstName: String, lastName: String): Person =
    Person(new ObjectId(), firstName, lastName)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creating a CodecProvider for &lt;code&gt;Person&lt;/code&gt; is simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val personCodecProvider = Macros.createCodecProvider[Person]()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is also an implicit helper that will create codec providers for your case classes by just passing in the class eg:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;import org.mongodb.scala.bson.codecs.Macros._
import org.mongodb.scala.bson.codecs.DEFAULT_CODEC_REGISTRY
import org.bson.codecs.configuration.CodecRegistries.{fromRegistries, fromProviders}

val codecRegistry = fromRegistries(fromProviders(classOf[Person], classOf[MyOtherCaseClass]), DEFAULT_CODEC_REGISTRY)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inserting an instance into MongoDB is simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val collection = database.getCollection[Person](&amp;quot;People&amp;quot;).withCodecRegistry(codecRegistry)
val person: Person = Person(&amp;quot;Ada&amp;quot;, &amp;quot;Lovelace&amp;quot;)
collection.insertOne(person).results() // results() is the custom blocking implicit used in the quick tour.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Querying and retrieving &lt;code&gt;Person&lt;/code&gt; instances is also super simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;collection.find().printResults() // printResults is the helper also used in the quick tour.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sealed-classes-and-adts:f6e2133bab10204926d960626000d5d7&#34;&gt;Sealed classes and ADTs&lt;/h3&gt;

&lt;p&gt;Hierarchical class structures are supported via sealed classes. Each subclass is handled specifically by the generated codec, so you only
need create a &lt;code&gt;CodecProvider&lt;/code&gt; for the parent sealed class. Internally an extra field (&lt;code&gt;_t&lt;/code&gt;) is stored alongside the data so that
the correct subclass can be hydrated when decoding the data.  Below is an example of a tree like structure containing branch and leaf nodes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;sealed class Tree
case class Branch(b1: Tree, b2: Tree, value: Int) extends Tree
case class Leaf(value: Int) extends Tree

val codecRegistry = fromRegistries( fromProviders(classOf[Tree]), DEFAULT_CODEC_REGISTRY )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;breaking-changes:f6e2133bab10204926d960626000d5d7&#34;&gt;Breaking changes&lt;/h2&gt;

&lt;p&gt;The scala driver follows semantic versioning, so the 2.0.0 release indicidates there have been some API breaking changes. However, they really are minimal and shouldn&amp;rsquo;t impact most users of the driver.&lt;/p&gt;

&lt;p&gt;The implicit default type for various methods in the &lt;code&gt;MongoCollection&lt;/code&gt; class in 1.0 was &lt;code&gt;Document&lt;/code&gt;. This was a bug as they should have been
the same type as the collection itself. For example with &lt;code&gt;MongoCollection[Person].find()&lt;/code&gt; in 1.0 it would have returned an &lt;code&gt;Observable[Document]&lt;/code&gt;. This is obviously incorrect and has been fixed in 2.0 to return an &lt;code&gt;Observable[Person]&lt;/code&gt;. Not many people have been impacted by this as it was only an implicit type and could explicity be declared: &lt;code&gt;MongoCollection[Person].find[Person]()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The other potentially breaking change is the introduction of a &lt;code&gt;SingleObservable&lt;/code&gt; which represents an &lt;code&gt;Observable&lt;/code&gt; containing only a single item. The implicit &lt;code&gt;SingleObservable[T].toFuture()&lt;/code&gt; method returns &lt;code&gt;Future[T]&lt;/code&gt;, whereas &lt;code&gt;Observable[T].toFuture()&lt;/code&gt; returns &lt;code&gt;Future[Seq[T]]&lt;/code&gt;. This may catch some users out however, most users of these single result Observables used the &lt;code&gt;head()&lt;/code&gt; method to get a single item future, so won&amp;rsquo;t be impacted.&lt;/p&gt;

&lt;h2 id=&#34;changable-executioncontexts:f6e2133bab10204926d960626000d5d7&#34;&gt;Changable ExecutionContexts&lt;/h2&gt;

&lt;p&gt;The other main change is the introduction of the &lt;code&gt;Observable[T].observeOn(context: ExecutionContext)&lt;/code&gt; implicit. This allows for computation to take place on alternative ExecutionContexts, handy for some long running or computationally heavy Observables.&lt;/p&gt;

&lt;h2 id=&#34;feedback-wanted:f6e2133bab10204926d960626000d5d7&#34;&gt;Feedback wanted&lt;/h2&gt;

&lt;p&gt;The 2.0 driver is available from:  &lt;code&gt;&amp;quot;org.mongodb.scala&amp;quot; %% &amp;quot;mongo-scala-driver&amp;quot; % &amp;quot;2.0.0&amp;quot;&lt;/code&gt;. For more information and examples see the &lt;a href=&#34;http://mongodb.github.io/mongo-scala-driver/2.0/&#34;&gt;driver documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We would love to have your feedback on the new driver, so please feel free to post to the &lt;a href=&#34;https://groups.google.com/forum/#!forum/mongodb-user&#34;&gt;MongoDB User&lt;/a&gt; mailing list.  For feature requests or bug reports please use &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA/&#34;&gt;Jira project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MongoDB Scala Driver Released</title>
      <link>http://rosslawley.co.uk/mongodb-scala-driver-released/</link>
      <pubDate>Tue, 20 Oct 2015 13:10:30 +0100</pubDate>
      
      <guid>http://rosslawley.co.uk/mongodb-scala-driver-released/</guid>
      <description>

&lt;p&gt;&lt;img style=&#34;max-width: 100%;&#34; src=&#34;http://rosslawley.co.uk/images/starNebula.jpg&#34;&gt;&lt;/p&gt;

&lt;p&gt;The new Scala Driver for MongoDB has been released!&lt;/p&gt;

&lt;p&gt;Last month I &lt;a href=&#34;http://rosslawley.co.uk/introducing-mongodb-scala-driver/&#34;&gt;announced&lt;/a&gt;
 the first release candidate of a new idiomatic Scala Driver for &lt;a href=&#34;http://mongodb.org&#34;&gt;MongoDB&lt;/a&gt; and I&amp;rsquo;m excited to announce that the first official release is now available on sonatype for Scala 2.11:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt; &amp;quot;org.mongodb.scala&amp;quot; %% &amp;quot;mongo-scala-driver&amp;quot; % &amp;quot;1.0.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;a-clean-simple-scala-driver:0667d62b0610317a357b6826680f4d5a&#34;&gt;A clean, simple Scala driver.&lt;/h2&gt;

&lt;p&gt;At &lt;a href=&#34;http://mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; we&amp;rsquo;ve been listening to your feedback about what you would like from a new Scala driver. With that in mind we&amp;rsquo;ve written a totally new Scala driver.  Here are some of the highlights:&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;float:right;&#34; src=&#34;http://mongodb.github.io/mongo-scala-driver/s/img/mongoScalaLogo.png&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A modern idiomatic Scala driver with asynchronous and non-blocking IO.&lt;/li&gt;
&lt;li&gt;A clean modern API following the latest MongoDB driver &lt;a href=&#34;https://github.com/mongodb/specifications&#34;&gt;specifications&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A new namespace for Scala &lt;code&gt;org.mongodb.scala&lt;/code&gt;. No more confusion about what classes required for Scala.&lt;/li&gt;
&lt;li&gt;A new &lt;a href=&#34;http://mongodb.github.io/mongo-scala-driver/1.0/reference/observables/&#34;&gt;&lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt; type that is both composable and flexible enough to handle streams of data from MongoDB.&lt;/li&gt;
&lt;li&gt;New immutable and mutable type safe &lt;a href=&#34;http://mongodb.github.io/mongo-scala-driver/1.0/bson/documents/&#34;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; classes with all the convenience of a &lt;code&gt;Map&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Comprehensive &lt;a href=&#34;http://mongodb.github.io/mongo-scala-driver/&#34;&gt;documentation&lt;/a&gt; site to help get you started.&lt;/li&gt;
&lt;li&gt;Easy &lt;a href=&#34;http://mongodb.github.io/mongo-scala-driver/1.0/integrations/&#34;&gt;integration&lt;/a&gt; with other Reactive libraries such as &lt;a href=&#34;http://reactivex.io/rxscala/&#34;&gt;RxScala&lt;/a&gt; and &lt;a href=&#34;http://www.reactive-streams.org/&#34;&gt;Reactive Streams&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is a quick example to whet your appetite:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// Connect to the users collection in mydb
val mongoClient: MongoClient = MongoClient()
val database: MongoDatabase = mongoClient.getDatabase(&amp;quot;mydb&amp;quot;)
val collection: MongoCollection[Document] = database.getCollection(&amp;quot;users&amp;quot;)

// The Document ADT enforces type safety and can implicitly box native scala types to BSON types
val martin = Document(&amp;quot;user&amp;quot; -&amp;gt; &amp;quot;Martin&amp;quot;)  // &amp;quot;Martin&amp;quot; becomes BsonString(&amp;quot;Martin&amp;quot;)

// Alternatively, create Documents from Json
val query = Document(&amp;quot;&amp;quot;&amp;quot;{user: &amp;quot;Martin&amp;quot;}&amp;quot;&amp;quot;&amp;quot;)

// Lets run a query for all Martins and print out the json representation of each document
collection.find(query).subscribe(
  (user: Document) =&amp;gt; println(user.toJson()),                         // onNext
  (error: Throwable) =&amp;gt; println(s&amp;quot;Query failed: ${error.getMessage}&amp;quot;), // onError
  () =&amp;gt; println(&amp;quot;Done&amp;quot;)                                               // onComplete
)

// Want Futures? No problems!
val futureUsers: Future[Seq[Document]] = collection.find(query).toFuture()
val firstMartin: Future[Document] = collection.find(query).first().head()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More examples and full documentation can be found on the &lt;a href=&#34;http://mongodb.github.io/mongo-scala-driver&#34;&gt;documentation&lt;/a&gt; hub, including a full &lt;a href=&#34;http://mongodb.github.io/mongo-scala-driver/1.0/getting-started/&#34;&gt;getting started&lt;/a&gt; guide.&lt;/p&gt;

&lt;h2 id=&#34;feedback-wanted:0667d62b0610317a357b6826680f4d5a&#34;&gt;Feedback wanted&lt;/h2&gt;

&lt;p&gt;We would love to have your feedback on the new driver, so please feel free to post to the &lt;a href=&#34;https://groups.google.com/forum/#!forum/mongodb-user&#34;&gt;MongoDB User&lt;/a&gt; mailing list or add feature requests to the &lt;a href=&#34;https://jira.mongodb.org/browse/SCALA/&#34;&gt;Jira project&lt;/a&gt;. There are a number of items on the roadmap such as; MongoDB Server 3.2 and Case Class support but all feature requests are welcome.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing a new MongoDB Scala Driver</title>
      <link>http://rosslawley.co.uk/introducing-mongodb-scala-driver/</link>
      <pubDate>Wed, 23 Sep 2015 13:00:00 +0100</pubDate>
      
      <guid>http://rosslawley.co.uk/introducing-mongodb-scala-driver/</guid>
      <description>

&lt;h2 id=&#34;update-now-released-hugoshortcode-1:30e1b2e2e4927e03c8ac09809618f25b&#34;&gt;Update - &lt;a href=&#34;http://rosslawley.co.uk/mongodb-scala-driver-released/&#34;&gt;now released!&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m really pleased to announce the first release candidate of a new MongoDB Scala Driver!&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;float:right;&#34; src=&#34;http://mongodb.github.io/mongo-scala-driver/s/img/mongoScalaLogo.png&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;insider-information:30e1b2e2e4927e03c8ac09809618f25b&#34;&gt;Insider information&lt;/h2&gt;

&lt;p&gt;At &lt;a href=&#34;http://mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; we&amp;rsquo;ve been really busy, back in April we &lt;a href=&#34;https://www.mongodb.com/blog/post/introducing-30-java-driver&#34;&gt;introduced&lt;/a&gt; the 3.0 Java driver. It was a massive undertaking that included numerous improvements and updates. What got me most excited with the 3.0 release was the introduction of a new fully asynchronous, non-blocking driver. Using this asynchronous driver as a base we also released an &lt;a href=&#34;mongodb.github.io/mongo-java-driver-rx&#34;&gt;RxJava&lt;/a&gt; driver and a &lt;a href=&#34;http://mongodb.github.io/mongo-java-driver-reactivestreams&#34;&gt;Reactive Streams&lt;/a&gt; driver.&lt;/p&gt;

&lt;p&gt;Today we are announcing a new MongoDB Scala Driver, which also builds upon the asynchronous driver, whilst still providing a first class Scala experience.&lt;/p&gt;

&lt;h2 id=&#34;scala-specifics:30e1b2e2e4927e03c8ac09809618f25b&#34;&gt;Scala specifics&lt;/h2&gt;

&lt;p&gt;This new Scala driver required much more than a simple wrapping of the Java driver. Here are some of the highlights:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A modern idiomatic Scala driver with asynchronous and non-blocking IO.&lt;/li&gt;
&lt;li&gt;A new &lt;a href=&#34;http://mongodb.github.io/mongo-scala-driver/1.0/reference/observables/&#34;&gt;&lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt; type that is both composable and flexible enough to handle streams of data from MongoDB.&lt;/li&gt;
&lt;li&gt;New immutable and mutable type safe &lt;a href=&#34;http://mongodb.github.io/mongo-scala-driver/1.0/bson/documents/&#34;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; classes with all the convenience of a &lt;code&gt;Map&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A clean modern API following the latest MongoDB driver &lt;a href=&#34;https://github.com/mongodb/specifications&#34;&gt;specifications&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A new namespace for Scala &lt;code&gt;org.mongodb.scala&lt;/code&gt;. No more confusion about what classes required for the Scala driver.&lt;/li&gt;
&lt;li&gt;Comprehensive &lt;a href=&#34;http://mongodb.github.io/mongo-scala-driver/&#34;&gt;documentation&lt;/a&gt; site to help get you started.&lt;/li&gt;
&lt;li&gt;Easy &lt;a href=&#34;http://mongodb.github.io/mongo-scala-driver/1.0/integrations/&#34;&gt;integration&lt;/a&gt; with other Reactive libraries such as &lt;a href=&#34;http://reactivex.io/rxscala/&#34;&gt;RxScala&lt;/a&gt; and &lt;a href=&#34;http://www.reactive-streams.org/&#34;&gt;Reactive Streams&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below is a quick example to whet your appetite:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// Connect to the users collection in mydb
val mongoClient: MongoClient = MongoClient()
val database: MongoDatabase = mongoClient.getDatabase(&amp;quot;mydb&amp;quot;)
val collection: MongoCollection[Document] = database.getCollection(&amp;quot;users&amp;quot;)

// The Document ADT enforces type safety and can implicitly box native scala types to BSON types
val query = Document(&amp;quot;user&amp;quot; -&amp;gt; &amp;quot;Martin&amp;quot;)  // &amp;quot;Martin&amp;quot; becomes BsonString(&amp;quot;Martin&amp;quot;)

// Lets run a query for all Martins and print out the json representation of each document
collection.find(query).subscribe(
  (user: Document) =&amp;gt; println(user.toJson()),                         // onNext
  (error: Throwable) =&amp;gt; println(s&amp;quot;Query failed: ${error.getMessage}&amp;quot;), // onError
  () =&amp;gt; println(&amp;quot;Done&amp;quot;)                                               // onComplete
)

// Want Futures? No problems!
val futureUsers: Future[Seq[Document]] = collection.find(query).toFuture()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Available on sonatype for Scala 2.11:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;&amp;quot;org.mongodb.scala&amp;quot; %% &amp;quot;mongo-scala-driver&amp;quot; % &amp;quot;1.0.0-rc0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;feedback-wanted:30e1b2e2e4927e03c8ac09809618f25b&#34;&gt;Feedback wanted&lt;/h2&gt;

&lt;p&gt;We would love to have your feedback on the new driver, so please feel free to email me directly or post to the &lt;a href=&#34;https://groups.google.com/forum/#!forum/mongodb-user&#34;&gt;MongoDB User&lt;/a&gt; mailing list.&lt;/p&gt;

&lt;p&gt;The best place to get up and running with the new driver is the &lt;a href=&#34;http://mongodb.github.io/mongo-scala-driver/1.0/getting-started/&#34;&gt;getting started&lt;/a&gt; guide.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>